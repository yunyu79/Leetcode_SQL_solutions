Table: Movies
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+

Table: Users
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+

Table: MovieRating
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+

# Write a solution to:
# Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
# Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.

# S:                               -----------------> We need to use "()" to include each SELECT result when using UNION.
                                   We can also use LIKE in WHERE clause to compare "created_at" string. E.g. WHERE created_at LIKE '2020-02%'
(SELECT name AS results
FROM Users u JOIN MovieRating mr
ON u.user_id = mr.user_id 
GROUP BY mr.user_id 
ORDER BY COUNT(mr.user_id) DESC, name
LIMIT 1
)
UNION ALL
(SELECT title 
FROM Movies m JOIN MovieRating mr
ON m.movie_id = mr.movie_id 
WHERE SUBSTR(created_at, 1, 7) = '2020-02'
GROUP BY mr.movie_id 
ORDER BY AVG(rating) DESC, title
LIMIT 1
);
