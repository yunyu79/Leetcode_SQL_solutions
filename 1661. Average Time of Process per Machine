Table: Activity

+----------------+---------+
| Column Name    | Type    |
+----------------+---------+
| machine_id     | int     |
| process_id     | int     |
| activity_type  | enum    |
| timestamp      | float   |
+----------------+---------+

# Q: There is a factory website that has several machines each running the same number of processes. Write a solution to find the average time each machine takes to 
# complete a process. --> GROUP BY machine.id
# The time to complete a process is the 'end' timestamp minus the 'start' timestamp. The average time is calculated by the total time to complete every process on the 
# machine divided by the number of processes that were run. --> JOIN two same tables (imagine oen for left table and the other one for right table), then filter in ON clause.
# The resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal places. --> AVG(), ROUND()

# S1: Solve by JOIN and filter in ON clause
# In ON clause, we can use any condition (NOT limited to the equation of joining two columns in two different tables. It can also speicify any value 
# in any column in left table (= filter) used to join any value in any column in another table) to achieve what we want to join. 

SELECT a.machine_id, ROUND(AVG(b.timestamp - a.timestamp),3) AS processing_time 
FROM Activity a JOIN Activity b
ON a.machine_id=b.machine_id AND a.process_id=b.process_id AND a.activity_type='start' AND b.activity_type='end'
GROUP BY a.machine_id;

# S2: Solve by JOIN and compare<> in ON clause
# We can compare values (unequal) in ON clause, like the Rising Temperature. 
SELECT a.machine_id, ROUND(AVG(b.timestamp - a.timestamp),3) AS processing_time 
FROM Activity a JOIN Activity b
ON a.machine_id=b.machine_id AND a.process_id=b.process_id AND a.timestamp < b.timestamp 
GROUP BY a.machine_id;

# S3: We can also use subquery.
